// Class automatically generated by Dev-C++ New Class wizard
#include <iostream>
#include <string>
#include <sstream>  //字符串流
#include <stdio.h>
#include <stdlib.h>
//#include "bigint.h"

using namespace std;
#ifndef INETADDRESS128_H
#define INETADDRESS128_H
#define MAXINT 0xFFFFFFFF
// No description
class InetAddress128
{
friend ostream& operator<< (ostream& os, const InetAddress128& IPv6);
	public:
		// class constructor
		InetAddress128();
		InetAddress128(const string& str);
		// class destructor
		~InetAddress128();
		unsigned address[4];
		// n<=32
		// 1<=begin<=128
		// 1<=len<=128
		// e.g. 11110111.subbit(3,3)=0x00000006=00000000000000000000000000000110
		// notice : the return type is unsigned int
		unsigned int  subbit32(unsigned int begin,unsigned int len);
		/**
		 * 1<=begin<=128
		 * 1<=len<=128
		 * notice: the return type is InetAddress128
		 */
		InetAddress128 subbit128(unsigned int begin,unsigned int len);
		InetAddress128 operator^(InetAddress128);
		// No description
		unsigned int operator%(unsigned int max);
		// No description
		bool operator<= (const InetAddress128) const;
		bool operator>= (const InetAddress128) const;
		// e.g. filter.sa.high(filter.sa_len) 
		// Return the highvalue accroding to its prefix length
		InetAddress128 high(int prefixLen);
		/**
		 * e.g. filter.sa.low(filter.sa_len) 
		 * Return the low value accroding to its prefix length
		 */
		InetAddress128 low(int prefixLen);
		// e.g. : sa.parse(3FFE:3200:0000:0000:0000:0000:0000:0000/24)
		bool parse(const string& strString);

		int  GetPrefixLen() const
		{
			// returns the value of prefix
			return prefix;
		}; 
		bool SetPrefixLen(const int len)
		{
			if(len < 0 || len >128)
				{
					cout<<"unvalid len "<<endl;
					return false;
				}
					prefix = len;
					return true;
		}
		// No description
		void print() const; 
		// No description
		char* tostring() const;
		// No description
		InetAddress128 operator<<(const unsigned int n);
		InetAddress128 operator>>(const unsigned int n);
		bool const operator==(const InetAddress128 &addr2) const;
		bool const IsZero() const
		{
			if (address[0] == address[1] == address[2] ==address[3] ==0)
				return true;
			return false;
		}
		// No description
		bool const operator>(const unsigned int n) ;
		// No description
		bool const operator<(const InetAddress128 &addr2) const;
		// No description
		bool const operator>(const InetAddress128 addr2) const;

		InetAddress128& operator=(const InetAddress128& rhs)
		{
			for (int i= 0 ; i < 4; ++i)
			{
				address[i] = rhs.address[i];
			}
			this->prefix = rhs.GetPrefixLen();
			return *this;
		}

		const int operator[](const unsigned short loc)
		{
			unsigned int tmpVal;
			if (loc >127)
				return -1;
			switch (loc/32)
			{
			case 0:tmpVal = address[0]<<(loc%32); tmpVal = tmpVal>>31;
				break;
			case 1:tmpVal = address[1]<<(loc%32); tmpVal = tmpVal>>31;
				break;
			case 2:tmpVal = address[2]<<(loc%32); tmpVal = tmpVal>>31;
				break;
			case 3:tmpVal = address[3]<<(loc%32); tmpVal = tmpVal>>31;
				break;
			default:
				return -1;
				break;
			}
			return tmpVal;
		}
		/*
		// No description
		InetAddress128 operator-(const InetAddress128);
		// No description
		InetAddress128 operator/(const unsigned int n);
		// No description
		InetAddress128 operator+(const InetAddress128 addr2);
		*/
		/**
		 * n<=128
		 * e.g. 1111000.right(3)=0001111
		 */
		//bool right(unsigned int n);
		/**
		 * n<=128
		 * e.g. 1111000.left(3)=1000000
		 */
		//bool left(unsigned int n);
		
	private:
		// No description
		int prefix;
};
#endif // INETADDRESS128_H

